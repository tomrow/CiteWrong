using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Serialization;
using System.IO;

namespace CiteWrong
{
    public partial class Form1 : Form
    {
        
        
        XmlSerializer xs = new XmlSerializer(typeof(BibSave));
        XmlSerializer xd = new XmlSerializer(typeof(SchemeSave));
        public Form1()
        {
            InitializeComponent();
        }
        
        
        private void openToolStripButton_Click(object sender, EventArgs e)
        {
            BiblioFileDialog.ShowDialog();
            
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            UIState.SelectedItem = -1;
            OpenSourceView();
        }

        private void OpenSourceView()
        {
            Form2 wizard = new Form2();
            wizard.ShowDialog();
            RefreshListView();
        }

        private void RefreshListView()
        {
            citeList.Items.Clear();
            schemeName.Text = Path.GetFileName(Bibliography.SchemePath);
            for (int i = 0; i < Bibliography.bDatabase.Count; i++)
            { citeList.Items.Add(Bibliography.bDatabase[i].authorName + " " + Bibliography.bDatabase[i].publicationDate.Year.ToString() + ", " + Bibliography.bDatabase[i].workTitle); }
        }

        private void importScheme_Click(object sender, EventArgs e)
        {
            schemeImportFileDialog.ShowDialog();
            

        }

        private void saveToolStripButton_Click(object sender, EventArgs e)
        {
            saveDatabaseDialog.ShowDialog();
            
        }

        private void newToolStripButton_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are you sure you want to erase your database?", "New File", MessageBoxButtons.YesNo)==DialogResult.Yes)
            {
                NewDocument();
            }

        }

        private void NewDocument()
        {
            Bibliography.SchemePath = "";
            Bibliography.bDatabase = new List<BibliographyEntry>();
            Bibliography.SchemeFormats = new List<SchemeDefinition>();
            schemeName.Text = "A scheme file has not been loaded.";
            RefreshListView();
        }

        private void BiblioFileDialog_FileOk(object sender, CancelEventArgs e)
        {
            System.IO.Stream openTarget = BiblioFileDialog.OpenFile();
            BibSave BibOpen = (BibSave)xs.Deserialize(openTarget);
            Bibliography.bDatabase = BibOpen.bDatabase;
            Bibliography.SchemeFormats = BibOpen.SchemeFormats;
            Bibliography.SchemePath = BibOpen.SchemePath;
            openTarget.Close();
            RefreshListView();
        }

        private void saveDatabaseDialog_FileOk(object sender, CancelEventArgs e)
        {
            System.IO.Stream saveTarget = saveDatabaseDialog.OpenFile();
            saveTarget.SetLength(0);
            BibSave BibSaved = new BibSave();
            BibSaved.bDatabase = Bibliography.bDatabase;
            BibSaved.SchemeFormats = Bibliography.SchemeFormats;
            BibSaved.SchemePath = Bibliography.SchemePath;
            xs.Serialize(saveTarget, BibSaved);
            saveTarget.Close();
        }

        private void schemeImportFileDialog_FileOk(object sender, CancelEventArgs e)
        {
            System.IO.Stream openTarget = schemeImportFileDialog.OpenFile();
            SchemeSave BibOpen = (SchemeSave)xd.Deserialize(openTarget);
            Bibliography.SchemeFormats = BibOpen.SchemeFormats;
            Bibliography.SchemePath = schemeImportFileDialog.FileName;
            openTarget.Close();
            RefreshListView();
        }

        private void schemeName_Click(object sender, EventArgs e)
        {
            UIState.SelectedItem = -1;
            OpenSchemeEditor();
        }

        private void OpenSchemeEditor()
        {
            Form4 wizard = new Form4();
            wizard.ShowDialog();
            RefreshListView();
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            exportFileDialog.ShowDialog();
        }

        private void exportFileDialog_FileOk(object sender, CancelEventArgs e)
        {
            StreamWriter w = new StreamWriter(exportFileDialog.FileName, false);
            w.WriteLine("<html><head><title>Bibliography generated by CiteWrong</title></head><body><h1>Bibliography</h1>");
            foreach (BibliographyEntry entry in Bibliography.bDatabase)
            {
                w.WriteLine("<p>"+entry.ToString()+"</p>");
            }
            w.WriteLine("</body></html>");
            w.Close();
            MessageBox.Show("Exported to markup file");
        }

        private void citeList_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            UIState.SelectedItem = citeList.SelectedIndex;
            OpenSourceView();
        }

        private void toolStripButton3_Click(object sender, EventArgs e)
        {
            UIState.SelectedItem = -1;
                OpenSchemeEditor();
        }

        private void copyToolStripButton_Click(object sender, EventArgs e)
        {
            if(citeList.SelectedIndex>=0)
            {
                UIState.SelectedItem = citeList.SelectedIndex;
                BibliographyEntry b = new BibliographyEntry();
                b = Bibliography.bDatabase[UIState.SelectedItem];
                b.sourceFmt = "InTextCitation$";
                System.Windows.Forms.Clipboard.SetText(b.ToString());
                MessageBox.Show(b.ToString());
            }
        }

        private void citeList_SelectedIndexChanged(object sender, EventArgs e)
        {
            UIState.SelectedItem = citeList.SelectedIndex;
        }
    }
}
